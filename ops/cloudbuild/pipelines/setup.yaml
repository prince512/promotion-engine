steps:
  - name: 'busybox:musl'
    args: [ 'echo', '${_NAME}-setup' ]
  - name: 'gcr.io/${PROJECT_ID}/cloud-builders/cloud-sdk-ruby'
    args: [ '/app/update-trigger.rb', '${_ENV}', 'true' ]
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args: [ '-eEuo', 'pipefail', '-c', '

    echo ========== Backend Service ==========;
    if [ "${_DESTROY}" != "true" ]; 
    then
      echo ========== Creating Backend ==========;

      exist=$(gcloud run services list --platform managed --region=${_REGION} --format="get(name)" --filter="metadata.name <= ${_NAME} AND metadata.name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 0 ]]; 
      then 
        gcloud run deploy ${_NAME} --image=gcr.io/cloudrun/hello --region=${_REGION} -q; 
        gcloud run services add-iam-policy-binding ${_NAME} --member=allUsers --role=roles/run.invoker --region=${_REGION}; 
      fi

      exist=$(gcloud compute network-endpoint-groups list --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 0 ]]; 
      then 
        gcloud compute network-endpoint-groups create ${_NAME} --network-endpoint-type=serverless --cloud-run-service=${_NAME} --region=${_REGION} -q;
      fi

      exist=$(gcloud compute backend-services list --global --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 0 ]]; 
      then 
        gcloud compute backend-services create ${_NAME} ${_ENABLE_LOGGING} ${_IAP} --load-balancing-scheme=EXTERNAL --custom-response-header="Access-Control-Allow-Origin:*" --custom-response-header="Access-Control-Allow-Methods:*" --custom-response-header="Access-Control-Allow-Headers:*" --global -q;
        gcloud compute backend-services add-backend ${_NAME} --network-endpoint-group=${_NAME} --network-endpoint-group-region=${_REGION} --global -q;
      fi

      # exist=$(gcloud scheduler jobs list --location ${_REGION} --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      # echo $exist;
      # if [[ $exist -eq 0 ]]; 
      # then 
      #   gcloud scheduler jobs create http ${_NAME} --schedule "0 0 * * *" --http-method GET --uri ${_URL} --location ${_REGION} -q;
      # fi

      # exist=$(gcloud beta run jobs list --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      # echo $exist;
      # if [[ $exist -eq 0 ]]; 
      # then 
      #   gcloud beta run jobs deploy ${_NAME} --image=gcr.io/cloudrun/hello --region=${_REGION} -q;
      # fi


    else

      echo ========== Destroying Backend ==========;

      # exist=$(gcloud beta run jobs list --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      # echo $exist;
      # if [[ $exist -eq 1 ]]; 
      # then 
      #   gcloud beta run jobs delete ${_NAME} --region=${_REGION} -q;
      # fi

      # exist=$(gcloud scheduler jobs list --location ${_REGION} --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      # echo $exist;
      # if [[ $exist -eq 1 ]]; 
      # then 
      #   gcloud scheduler jobs delete http ${_NAME} --location ${_REGION} -q;
      # fi

      exist=$(gcloud compute backend-services list --global --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 1 ]]; 
      then 
        gcloud compute backend-services delete ${_NAME} --global -q;
      fi

      exist=$(gcloud compute network-endpoint-groups list --format="get(name)" --filter="name <= ${_NAME} AND name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 1 ]]; 
      then 
        gcloud compute network-endpoint-groups delete ${_NAME} --region=${_REGION} -q;
      fi

      exist=$(gcloud run services list --platform managed --region=${_REGION} --format="get(name)" --filter="metadata.name <= ${_NAME} AND metadata.name >= ${_NAME}" | wc -l);
      echo $exist;
      if [[ $exist -eq 1 ]]; 
      then 
       gcloud run services delete ${_NAME} --region=${_REGION} -q; 
      fi

      echo ===========Destroyed Backend  ============================;

    fi
    ' ]
  - name: 'gcr.io/${PROJECT_ID}/${_UPTIME_BUILDER}'
    args: [ '/app/uptime-check.rb', "$PROJECT_ID", "${_NAME}", "${_URL}", "${_PATH}/info.json" ]
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args: ['true']
    waitFor: ['-']
  - name: 'gcr.io/${PROJECT_ID}/${_UPTIME_BUILDER}'
    args: ['--version']
    waitFor: ['-']
substitutions:
  _UPTIME_BUILDER: 'cloud-builders/cloud-sdk-ruby'
  _PATH: "/apis/${_BUSINESSUNIT}/${_REPO}/v1"
options:
  machineType: 'E2_HIGHCPU_8'
  dynamic_substitutions: true
timeout: 900s
